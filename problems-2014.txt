
* Remember to pass length of array n even if you don't think it's needed

* Java 5
	- Generics
	- Annotations
	- Autoboxing
	- Varargs

* Divisible by 3
	- Digits of number are divisible by 3

* Run-length encoding
	- a2b5c1, etc.

* Stack min / max
	- Keep a separate stack
	- push(): if less then min push to min stack
	- pop(): if equal min than pop from min stack

* Sort w. only stacks
	- Use another stack
	- While s not empty
	- pop() to tmp
		- while r not empty and r.peek() > tmp
		- s.push(r.pop())

* Check tree is balanced
	- recursive(1 + max(left, right)) - recursive(min(left, right)) <= 1

* Tree ancestor
	- if covers(left, p) and covers(left, q) then common(left)
	- if covers(right, p) and covers(right, q) then common(right)
	- BETTER
		- TWO_NODES_FOUND, ONE_NODE_FOUND, NO_NODES_FOUND
		- covers(left, p, q)
		- covers(right, p, q)

* Is sub tree
	boolean containsTree(TreeNode t1, TreeNode t2) {
		if (t2 == null) return true; // The empty tree is always a subtree 
		else return subTree(t1, t2);
	}

	boolean subTree(TreeNode r1, TreeNode r2) {
		if (r1 == null)
			return false; // big tree empty & subtree still not found. 
		if (r1.data == r2.data) {
			if (matchTree(r1,r2)) return true; 
		}
		return (subTree(r1.left, r2) || subTree(r1.right, r2)); 
	}

	boolean matchTree(TreeNode r1, TreeNode r2) { 
		if (r2 == null && r1 == null)
			return true; // nothing left in the subtree 
		if (r1 == null || r2 == null)
			return false; // big tree empty & subtree still not found 
		if (r1.data != r2.data)
			return false; // data doesn’t match 
		return (matchTree(r1.left, r2.left) && matchTree(r1.right, r2.right));
	}

* Binary
	~0 -> All 1s, then shift as needed
	(1 << i) - 1 -> All 1s after ith bit

* Fibo
	int fibo(int n) {
		if (n < 0) return -1; // Error condition. if (n == 0) return 0;
		int a=1, b=1; 
		for(inti=3;i<=n;i++){
			int c = a + b;
			a = b;
			b = c;
		}
		return b;
	}

* Given three strings str1, str2 and str3; complete the function to find
  the smallest subsequence in str1 which contains all the characters in
  str2 (in any order) and not those in str3.
	1. Split the str1 with each character of the str3.
	2. Now iterate all the words and check the constraint that word
	   contain all the characters of str2, checking can be skipped by
	   comparing string lengths.
	3. Return the minimum length string which satisfies point 2.

* 3SUM problem
	- Suppose the input array is S[0..n-1]. 3SUM can be solved in O(n^2)
	  time on average by inserting each number S[i] into a hash table, and
	  then for each index i and j, checking whether the hash table contains
	  the integer -(S[i]+S[j]).
	- i for i to n
		k = i + 1
		l = n - 1
		if S[i] + S[k] + S[l] > 0
			l -= 1
		else
			k += 1

* Max in sliding window
	Step  Number to  Numbers in      Indices     Maximum 
	      Be Pushed  Sliding Window  in queue    in Window
	1     2          2               0(2)
	2     3          2, 3            1(3)
	3     4          2, 3, 4         2(4)        4
	4     2          3, 4, 2         2(4), 3(2)  4 
	5     6          4, 2, 6         4(6)        6 
	6     2          2, 6, 2         4(6), 5(2)  6 
	7     5          6, 2, 5         4(6), 6(5)  6 
	8     1          2, 5, 1         6(5), 7(1)  5

* Find top k % words
	- Same as above (build hash table). Use min heap and keep the size of
	  min heap to k, and for each word in the hash we compare the
	  occurrences of words with the min, 1) if it's greater than the min
	  value, remove the min (if the size of the min heap is equal to k) and
	  insert the number in the min heap. 2) rest simple conditions. After
	  traversing through the array, we just convert the min heap to array
	  and return the array.

* Median in BST
	- We can find the median by using the rabbit and the turtle pointer. The
	  rabbit moves twice as fast as the turtle in the in-order traversal of
	  the BST. This way when the rabbit reaches the end of traversal, the
	  turtle in at the median of the BST. Please see the full expalaination
	  at http://www.technicallyidle.com/2011/01/05/median-of-a-binary-seach-
	  tree-bst/ .

* Create balanced BST from sorted array
	1) Get the Middle of the array and make it root.
	2) Recursively do same for left half and right half.
	    a) Get the middle of left half and make it left child of the root
	       created in step 1.
	    b) Get the middle of right half and make it right child of the
	       root created in step 1.

* Balanced BST from sorted linked list
	- The idea is to insert nodes in BST in the same order as the appear in
	  Linked List, so that the tree can be constructed in O(n) time
	  complexity. We first count the number of nodes in the given Linked
	  List. Let the count be n. After counting nodes, we take left n/2 nodes
	  and recursively construct the left subtree. After left subtree is
	  constructed, we allocate memory for root and link the left subtree
	  with root. Finally, we recursively construct the right subtree and
	  link it with root. While constructing the BST, we also keep moving the
	  list head pointer to next so that we have the appropriate pointer in
	  each recursive call.

* Balanced BST from acyclic graph
	- Start from an arbitrarily node, do a bfs or dfs to find out the
	  furtherest node, denote it as node a. O(n). Start from node a, do a
	  bfs or dfs again to find out the furtherest node from node a, get the
	  length len. O(n). Then the least height of the tree is interget part
	  of (len+1)/2, and the root node is node b which is (len+1)/2 from node
	  a. Total time complexity is O(2n)=O(n).

* Cycle detection
	- An undirected graph has a cycle if and only if a depth-first search
	  (DFS) finds an edge that points to an already-visited vertex (a back
	  edge).[4] Equivalently, all the back edges, which DFS skips over, are
	  part of cycles.[5] In the case of undirected graphs, only O(n) time is
	  required to find a cycle in an n-vertex graph, since at most n − 1
	  edges can be tree edges.

	  A directed graph has a cycle if and only if a DFS finds a back edge.
	  Forward and cross edges do not necessarily indicate cycles. Many
	  topological sorting algorithms will detect cycles too, since those are
	  obstacles for topological order to exist. Also, if a directed graph
	  has been divided into strongly connected components, cycles only exist
	  within the components and not between them, since cycles are strongly
	  connected.[5]

* Merge k sorted arrays
	- Use a min heap

* String search
	- Knuth, Morris, Pratt

* Anagram string search
	- countP[]: Store count of all characters of pattern
    - countTW[]: Store count of current window of text
    - Move window across text string

* Longest Palindrome Dynamic Programming
	- Let X[0..n-1] be the input sequence of length n and L(0, n-1) be the
	  length of the longest palindromic subsequence of X[0..n-1].
	- If last and first characters of X are same, then L(0, n-1) = L(1, n-2)
	  + 2. 
	- Else L(0, n-1) = MAX (L(1, n-1), L(0, n-2)).

* How many bits are set
	- Brian Kernighan’s Algorithm

	  int countSetBits(int n) {
	      unsigned int count = 0;
	      while (n) {
	        n &= (n-1) ;
	        count++;
	      }
	      return count;
	  }

* String index
	public static int findIndex(int n) {
		if (n < 10) {
		    return n - 1;
		} else if (n < 100) {
		    return (n - 10) * 2 + 9;
		} else if (n < 1000) {
		    return (n - 100) * 3 + 90 * 2 + 9;
		} else if (n < 10000) {
		    return (n - 1000) * 4 + 900 * 3 + 90 * 2 + 9;
		} else {
		    return 9000 * 4 + 900 * 3 + 90 * 2 + 9;
		}
	}

* Write an algorithm such that if an element in an MxN matrix is 0, its
  entire row and column is set to 0.
	- Do we really need O(MN) space? No Since we’re going to set the entire
	  row and column to zero, do we really need to track which cell in a row
	  is zero? No We only need to know that row 2, for example, has a zero.

* Two color sort
	- Partition elements similar to quicksort
	void twoColorSort(int* arr, int size)
	{
	    assert(arr);
	    assert(size > 0);
	    int left = 0;
	    int right = size - 1;
	    while (left < right)
	    {
	        while ((left < size) && (arr[left] != 1))
	            ++left;
	        while ((right >= 0) && (arr[right] != 0))
	            --right;
	        if (left < right)
	        {
	            arr[left] = 0;
	            arr[right] = 1;
	        }
	    }
	    return;
	}

* Matrix rotate
	public static void rotate(int[][] matrix, int n) { 
		for (int layer = 0; layer < n / 2; ++layer) {
			int first = layer; intlast=n-1-layer;
			for(int i = first; i < last; ++i) {
				int offset = i - first;
				int top = matrix[first][i]; // save top
				// left -> top
				matrix[first][i] = matrix[last-offset][first];
				// bottom -> left
				matrix[last-offset][first] = matrix[last][last - offset];
				// right -> bottom
				matrix[last][last - offset] = matrix[i][last];
				// top -> right
				matrix[i][last] = top; // right <- saved top 
			}
		} 
	}

* Given an array of numbers, return array of products of all other
  numbers (no division)
	An explaination of polygenelubricants method is: The trick is to
	construct the arrays (in the case for 4 elements)

	{              1,         a[0],    a[0]*a[1],    a[0]*a[1]*a[2],  }
	{ a[1]*a[2]*a[3],    a[2]*a[3],         a[3],                 1,  }

	Both of which can be done in O(n) by starting at the left and right
	edges respectively.

	Then multiplying the two arrays element by element gives the required
	result

	My code would look something like this:

	int a[N] // This is the input
	int products_below[N];
	p=1;
	for(int i=0;i<N;++i) {
	  products_below[i]=p;
	  p*=a[i];
	}

	int products_above[N];
	p=1;
	for(int i=N-1;i>=0;--i) {
	  products_above[i]=p;
	  p*=a[i];
	}

	int products[N]; // This is the result
	for(int i=0;i<N;++i) {
	  products[i]=products_below[i]*products_above[i];
	}

	If you need to be O(1) in space too you can do this (which is less
	clear IMHO)

	int a[N] // This is the input
	int products[N];

	// Get the products below the current index
	p=1;
	for(int i=0;i<N;++i) {
	  products[i]=p;
	  p*=a[i];
	}

	// Get the products above the curent index
	p=1;
	for(int i=N-1;i>=0;--i) {
	  products[i]*=p;
	  p*=a[i];
	}
